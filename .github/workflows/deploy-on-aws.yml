name: Deploy on AWS WIP

on:
  workflow_call:

jobs:
  #  create-app-and-environment:
  #    secrets:
  #      TF_API_TOKEN:
  #        required: true
  create-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Empty step
        run: echo 'Do nothing'
#       - name: Checkout client infrastructure repository
#        uses: actions/checkout@v3
#        with:
#          repository: anct-cartographie-nationale/client-infrastructure
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#      - name: Get workspace name from branch name
#        id: terraform-workspace-name
#        run: |
#          BRANCH_NAME=$(echo ${{ github.event.ref }} | cut -d'/' -f 4)
#          echo "::set-output name=value::feature-$BRANCH_NAME"
#
#      # cut -d'/' -f 4 || cut 4 because the github ref format is ref/head/feat/branch-name
#      - name: Terraform Init
#        id: init
#        run: |
#          sed -i "s|prefix = \"client-\"|name = \"${{ steps.terraform-workspace-name.outputs.value }}\"|g" main.tf
#           terraform init
#        env:
#          TF_WORKSPACE: ${{ steps.terraform-workspace-name.outputs.value }}
##      - name: Set AWS credentials
##        env:
##          TERRAFORM_BEARER_TOKEN: ${{ secrets.TF_API_TOKEN }}
##        run: |
##          touch payload.json
##          jq '{ data: { id: "ws-DgsiZWtRctCdPZpi", attributes: { key: "AWS_SECRET_ACCESS_KEY", value:"fsdhgjkghjmlhgd" }, type: "vars" } }' > payload.json
##          curl \
##          --header "Authorization: Bearer $TERRAFORM_BEARER_TOKEN" \
##          --header "Content-Type: application/vnd.api+json" \
##          --request POST \
##          --data @payload.json \
##          https://app.terraform.io/api/v2/vars
##
##      - name: Terraform Plan
##        id: plan
##        #if: github.event_name == 'pull_request'
##        run: terraform plan -no-color -input=false
##        continue-on-error: true
##        env:
##          TF_WORKSPACE: ${{ steps.terraform-workspace-name.outputs.value }}
##
##      - name: Update Pull Request
##        uses: actions/github-script@v6.0.0
##        #if: github.event_name == 'pull_request'
##        env:
##          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
##        with:
##          github-token: ${{ secrets.GITHUB_TOKEN }}
##          script: |
##            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
##            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
##            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
##            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
##
##            <details><summary>Show Plan</summary>
##
##            \`\`\`\n
##            ${process.env.PLAN}
##            \`\`\`
##
##            </details>
##
##            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
##
##            github.rest.issues.createComment({
##              issue_number: context.issue.number,
##              owner: context.repo.owner,
##              repo: context.repo.repo,
##              body: output
##            })
##
###      - name: Terraform Plan Status
###        if: steps.plan.outcome == 'failure'
###        run: exit 1
###      - name: Terraform Apply
###        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
###        run: terraform apply -auto-approve -input=false
###        env:
###          TF_WORKSPACE: production
