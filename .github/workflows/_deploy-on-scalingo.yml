name: Reusable NodeJS Application Scalingo Deployer Workflow

on:
  workflow_call:
    inputs:
      application-full-name:
        required: true
        type: string
      scalingo-remote-domain-url:
        required: false
        type: string
        default: 'git@ssh.osc-fr1.scalingo.com'
      scalingo-ssh-host-domain:
        required: false
        type: string
        default: 'ssh.osc-fr1.scalingo.com'

    secrets:
      SCALINGO_API_TOKEN:
        required: true

jobs:
  create-app-and-environment:
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    outputs:
      deployer-private-ssh-key: ${{ steps.deployer-private-ssh-key.outputs.private-key }}
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Create the application with its specific environment if it does not exist
        run: |
          set +e
          APP_ALREADY_EXIST=$(scalingo apps | grep -c ${{ inputs.application-full-name }})
          set -e
          if [[ $APP_ALREADY_EXIST -eq 0 ]]; then scalingo create ${{ inputs.application-full-name }}; else echo 'Error app exists already or has an invalid name'; fi

      - name: Generate transient ssh-keys then add the public key to the logged account for deployment
        run: |
          mkdir -p /home/.ssh
          ssh-keygen -q -t rsa -N '' -f /home/.ssh/id_rsa
          scalingo keys-add ${{ inputs.application-full-name }} /home/.ssh/id_rsa.pub

      - name: Set the generate ssh private key as an output, key value will masked in logs, handling the set-output truncate multiline string behaviours (ref:https://github.community/t/set-output-truncates-multiline-strings/16852)
        id: deployer-private-ssh-key
        run: |
          echo "::set-output name=private-key::$(cat /home/.ssh/id_rsa)"

  deploy-to-target-environment:
    runs-on: ubuntu-latest
    needs: create-app-and-environment

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v3
        with:
          name: build

      # Current structure
      # /cartographie
      # /client-application <= Keep only this
      # /mediation-numerique
      # /orientation

      # Target structure
      # /client-application
      # server.js
      # package.json
      # .htaccess

      - name: Move the folders to achieve target folder structure
        run: |
          rm -rf cartographie
          rm -rf mediation-numerique
          rm -rf orientation

      - name: Release - Generate minimalist server.js to serve static files
        run: |
          touch server.js
          CONTENT=$(cat << EOF
          var express = require('express');

          var app = express();
          var directory = '/client-application'
          app.use(express.static(__dirname + directory));

          var port = process.env.PORT || 3000;
          app.listen(port, function () {
            console.log('Listening on', port);
          });
          EOF
          )
          echo "$CONTENT" >> server.js

      - name: Release - Generate minimalist package.json to install express
        run: |
          touch package.json
          CONTENT=$(cat << EOF
          {
            "name": "client-application",
            "scripts": {
              "start": "node server.js"
            },
            "dependencies": {
              "express": "^4.18.1"
            }
          }
          EOF
          )
          echo "$CONTENT" >> package.json

      - name: Release - Generate minimalist .htaccess for spa entrypoint
        run: |
          touch .htaccess
          HTACCESS=$(cat << EOF
          RewriteEngine On
          DirectoryIndex index.html
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteRule . index.html [L]

          <FilesMatch "index\.html">
          Header set Cache-Control "max-age=60, private, proxy-revalidate"
          </FilesMatch>
          EOF
          )
          echo "$HTACCESS" >> .htaccess

      - name: Initialise a local git repository for deployment (a scalingo deployment is a push to their remote)
        run: |
          rm -rf .git
          git config --global init.defaultBranch master
          git config --global user.email dummy@email.fr
          git config --global user.name ScalingoDeployer
          git config --global push.autoSetupRemote true
          git init .
          git add .
          git remote add scalingo ${{ inputs.scalingo-remote-domain-url }}:${{ inputs.application-full-name }}.git
          git commit -m "Release bundle"

      - name: Set up ssh authentification to scalingo by setting the private key and known_hosts file
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ needs.create-app-and-environment.outputs.deployer-private-ssh-key }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ inputs.scalingo-ssh-host-domain }} >> ~/.ssh/known_hosts

      # SI PROBLEME REGARDER L'output de ce step
      - name: Push to deploy
        run: |
          git push scalingo -f

  cleanup-deploy-keys:
    needs: deploy-to-target-environment
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Remove the transient ssh-key from logged profile
        run: scalingo keys-remove ${{ inputs.application-full-name }}
        continue-on-error: true
